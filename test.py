durations = [0.01, 0.04, 0.07, 1.13, 2.21, 60.1, 60.2]

def group_sum(list):
    if (len(list) == 1):
        return 0.033
    
    sum = 0
    for i in range(len(list) - 1):
        sum += list[i + 1] - list[i]
    
    return sum

def calculate_average_duration(durations):
    filtered_durations = []

    i = 0
    while i < len(durations):
        duration = durations[i]
        if 0 < duration < 60:
            filtered_durations.append(duration)
            durations.pop(i)
        elif duration >= 60:
            break
        else:
            i += 1
        
    sum_all = 0.0
    count = 0

    current_group = []
    for duration in filtered_durations:
        if current_group and (duration - current_group[-1]) > 0.04:
            sum_all += group_sum(current_group)
            count += 1
            current_group = []

        current_group.append(duration)

    if len(current_group) == 1:
        sum_all += 0.033  # Assume alone duration as 0.033
        count += 1

    if count > 0:
        sum_all /= count

    return sum_all

result = calculate_average_duration(durations)
print(result)
print(durations)

# Example list of blink durations
blink_durations = [0.2, 0.3, 0.1, 0.25, 0.15]

# Calculate the average blink duration
average_duration = sum(blink_durations) / len(blink_durations)

# Calculate the blink frequency
blink_frequency = 1 / average_duration

print("Average Blink Duration:", average_duration)
print("Blink Frequency:", blink_frequency)

numbers = [0.03203333333333333, 0.032, 0.032033333333333344, 0.03196666666666667, 0.03203333333333333, 0.032, 0.032, 0.03196666666666664, 0.03203333333333336, 0.03196666666666664, 0.04800000000000004, 0.03199999999999997, 0.03200000000000003, 0.03196666666666664, 0.03203333333333336, 0.03200000000000003, 0.03203333333333325, 0.03200000000000003, 0.03200000000000003, 0.0319666666666667, 0.0479666666666666, 0.03203333333333336, 0.03200000000000003, 0.03203333333333336, 0.06399999999999995, 0.06400000000000006, 0.06399999999999995, 0.08000000000000007, 0.06396666666666673, 0.06403333333333316, 0.06400000000000006, 0.06400000000000006, 0.06406666666666672, 0.07993333333333319, 0.06403333333333339, 0.06396666666666673, 0.06403333333333339, 0.06399999999999983, 0.07996666666666674, 0.06400000000000006, 0.06403333333333339, 0.06396666666666673, 0.06400000000000006, 0.06399999999999961, 0.08003333333333362, 0.06400000000000006, 0.06400000000000006, 0.06403333333333316, 0.0639666666666665, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.08006666666666629, 0.0639333333333334, 0.06403333333333361, 0.0639666666666665, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06399999999999961, 0.06400000000000006, 0.06403333333333361, 0.0639666666666665, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06403333333333361, 0.06399999999999961, 0.06399999999999961, 0.08000000000000007, 0.06403333333333361, 0.0639666666666665, 0.06403333333333361, 0.06403333333333361, 0.07996666666666652, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06399999999999917, 0.08000000000000007, 0.0639666666666674, 0.06403333333333272, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.0639666666666665, 0.06403333333333361, 0.0639666666666665, 0.06403333333333361, 0.06400000000000006, 0.08000000000000007, 0.06403333333333272, 0.0639666666666674, 0.06403333333333272, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06403333333333361, 0.0639666666666665, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06403333333333272, 0.0639666666666674, 0.06399999999999917, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06403333333333361, 0.07996666666666652, 0.06403333333333272, 0.06400000000000006, 0.06403333333333361, 0.0639666666666665, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06399999999999917, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.0640333333333345, 0.06400000000000006, 0.06403333333333272, 0.0639666666666674, 0.08000000000000007, 0.06396666666666562, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06403333333333272, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.0640333333333345, 0.06400000000000006, 0.06400000000000006, 0.06399999999999828, 0.08000000000000007,
           0.06400000000000006, 0.06416666666666693, 0.06380000000000052, 0.06403333333333272, 0.06400000000000006, 0.08000000000000007, 0.0640333333333345, 0.06396666666666562, 0.0640333333333345, 0.06400000000000006, 0.0799999999999983, 0.06400000000000006, 0.06400000000000006, 0.0640333333333345, 0.06393333333333295, 0.06403333333333272, 0.07996666666666741, 0.06403333333333272, 0.0639666666666674, 0.0640333333333345, 0.06399999999999828, 0.08003333333333273, 0.06400000000000183, 0.06436666666666646, 0.06359999999999921, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.06403333333333272, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06403333333333272, 0.0639666666666674, 0.06403333333333272, 0.0639666666666674, 0.08016666666666694, 0.06413333333333249, 0.06373333333333342, 0.0639666666666674, 0.06400000000000006, 0.06400000000000006, 0.08003333333333273, 0.06400000000000006, 0.0639666666666674, 0.06403333333333272, 0.0639666666666674, 0.08003333333333273, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06403333333333272, 0.07996666666666741, 0.06403333333333272, 0.0639666666666674, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06403333333333272, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06396666666666562, 0.0640333333333345, 0.06396666666666562, 0.08003333333333451, 0.06400000000000006, 0.06400000000000006, 0.06396666666666562, 0.0640333333333345, 0.06400000000000006, 0.0799999999999983, 0.0640333333333345, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.08000000000000007, 0.06400000000000006, 0.06400000000000006, 0.0642666666666667, 0.06373333333333342, 0.06400000000000006, 0.08000000000000007, 0.06399999999999828, 0.0641000000000016, 0.06389999999999851, 0.06400000000000183, 0.08003333333333273, 0.06400000000000006, 0.06400000000000006, 0.06396666666666562, 0.0640333333333345, 0.06396666666666562, 0.08000000000000185, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06403333333333094, 0.06400000000000006, 0.08000000000000185, 0.06400000000000006, 0.06400000000000006, 0.06406666666666538, 0.06409999999999982, 0.0798333333333332, 0.06396666666666562, 0.0640333333333345, 0.06400000000000006, 0.06396666666666562, 0.0640333333333345, 0.0799999999999983, 0.0640333333333345, 0.06396666666666562, 0.0640333333333345, 0.06396666666666562, 0.08000000000000185, 0.06400000000000006, 0.0640333333333345, 0.06400000000000006, 0.06403333333333094, 0.06400000000000006, 0.08000000000000185, 0.06400000000000006, 0.06396666666666562, 0.06400000000000006, 0.06400000000000006, 0.0799999999999983, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.06400000000000006, 0.08003333333333629, 0.06400000000000006, 0.0639999999999965, 0.06400000000000006, 0.06400000000000006, 0.08003333333333629, 0.06396666666666562, 0.0640333333333345, 0.06400000000000006, 0.06396666666666206, 0.06400000000000361, 0.08003333333333273, 0.0639999999999965, 0.06403333333333805, 0.06396666666666562, 0.06400000000000006, 0.06400000000000006]

# differences = [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]
average_gap = sum(numbers) / len(numbers)

print(average_gap)